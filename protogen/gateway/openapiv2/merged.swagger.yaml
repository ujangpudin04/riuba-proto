swagger: "2.0"
info:
  title: proto/hello/hello.proto
  version: version not set
tags:
  - name: HelloService
  - name: UserService
    description: Documentation for user service
  - name: ImageService
  - name: BankService
consumes:
  - application/json
produces:
  - application/json
paths:
  /bank.BankService/FetchExchangeRates:
    post:
      operationId: BankService_FetchExchangeRates
      responses:
        "200":
          description: A successful response.(streaming responses)
          schema:
            type: object
            properties:
              result:
                $ref: '#/definitions/bankExchangeRateResponse'
              error:
                $ref: '#/definitions/rpcStatus'
            title: Stream result of bankExchangeRateResponse
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/bankExchangeRateRequest'
      tags:
        - BankService
  /bank.BankService/GetCurrentBalance:
    post:
      operationId: BankService_GetCurrentBalance
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/bankCurrentBalanceResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/bankCurrentBalanceRequest'
      tags:
        - BankService
  /bank.BankService/SummarizeTransactions:
    post:
      operationId: BankService_SummarizeTransactions
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/bankTransactionSummary'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          description: ' (streaming inputs)'
          in: body
          required: true
          schema:
            $ref: '#/definitions/bankTransaction'
      tags:
        - BankService
  /hello.HelloService/SayHello:
    post:
      operationId: HelloService_SayHello
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/helloHelloResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/helloHelloRequest'
      tags:
        - HelloService
  /hello.HelloService/SayHelloContinuous:
    post:
      operationId: HelloService_SayHelloContinuous
      responses:
        "200":
          description: A successful response.(streaming responses)
          schema:
            type: object
            properties:
              result:
                $ref: '#/definitions/helloHelloResponse'
              error:
                $ref: '#/definitions/rpcStatus'
            title: Stream result of helloHelloResponse
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          description: ' (streaming inputs)'
          in: body
          required: true
          schema:
            $ref: '#/definitions/helloHelloRequest'
      tags:
        - HelloService
  /hello.HelloService/SayHelloToEveryOne:
    post:
      operationId: HelloService_SayHelloToEveryOne
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/helloHelloResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          description: ' (streaming inputs)'
          in: body
          required: true
          schema:
            $ref: '#/definitions/helloHelloRequest'
      tags:
        - HelloService
  /hello.HelloService/SayManyHello:
    post:
      operationId: HelloService_SayManyHello
      responses:
        "200":
          description: A successful response.(streaming responses)
          schema:
            type: object
            properties:
              result:
                $ref: '#/definitions/helloHelloResponse'
              error:
                $ref: '#/definitions/rpcStatus'
            title: Stream result of helloHelloResponse
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/helloHelloRequest'
      tags:
        - HelloService
  /image.ImageService/CreateImage:
    post:
      operationId: ImageService_CreateImage
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/imageCreateImageResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/imageCreateImageRequest'
      tags:
        - ImageService
  /image.ImageService/GetImage:
    post:
      operationId: ImageService_GetImage
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/imageImageResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/imageGetImageRequest'
      tags:
        - ImageService
  /image.ImageService/UpdateImage:
    post:
      operationId: ImageService_UpdateImage
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/imageImageResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/imageUpdateImageRequest'
      tags:
        - ImageService
  /user.UserService/DeleteUser:
    post:
      operationId: UserService_DeleteUser
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/userUserResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/userGetUserRequest'
      tags:
        - UserService
  /user.UserService/GetListUser:
    post:
      operationId: UserService_GetListUser
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/userGetListUserResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties: {}
      tags:
        - UserService
  /user.UserService/GetUser:
    post:
      operationId: UserService_GetUser
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/userUserResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/userGetUserRequest'
      tags:
        - UserService
  /user.UserService/UpdateUser:
    post:
      operationId: UserService_UpdateUser
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/userUserResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/userUpdateUserRequest'
      tags:
        - UserService
  /user/v1/login:
    post:
      summary: Access the App
      description: To Access the App with token
      operationId: UserService_Login
      responses:
        "200":
          description: Return User
          schema:
            $ref: '#/definitions/userUserResponse'
        "400":
          description: Returned when given currency pair is not exists
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          description: Description for LoginRequest
          in: body
          required: true
          schema:
            $ref: '#/definitions/userLoginRequest'
      tags:
        - UserService
  /user/v1/register:
    post:
      summary: Register User
      description: To Add User
      operationId: UserService_Register
      responses:
        "200":
          description: Return register request
          schema:
            $ref: '#/definitions/userRegisterResponse'
        "400":
          description: Returned when account is exists
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          description: Description for RegisterRequest
          in: body
          required: true
          schema:
            $ref: '#/definitions/userRegisterRequest'
      tags:
        - UserService
definitions:
  bankCurrentBalanceRequest:
    type: object
    properties:
      account_number:
        type: string
  bankCurrentBalanceResponse:
    type: object
    properties:
      amount:
        type: number
        format: double
      current_date:
        $ref: '#/definitions/typeDate'
  bankExchangeRateRequest:
    type: object
    properties:
      from_currency:
        type: string
      to_currency:
        type: string
  bankExchangeRateResponse:
    type: object
    properties:
      from_currency:
        type: string
      to_currency:
        type: string
      rate:
        type: number
        format: double
      timestamp:
        type: string
  bankTransaction:
    type: object
    properties:
      account_number:
        type: string
      type:
        $ref: '#/definitions/bankTransactionType'
      amount:
        type: number
        format: double
      timestamp:
        $ref: '#/definitions/typeDateTime'
      notes:
        type: string
  bankTransactionSummary:
    type: object
    properties:
      account_number:
        type: string
      sum_amount_in:
        type: number
        format: double
      sum_amount_out:
        type: number
        format: double
      sum_total:
        type: number
        format: double
      transaction_date:
        $ref: '#/definitions/typeDate'
  bankTransactionType:
    type: string
    enum:
      - TRANSACTION_TYPE_UNSPECIFIED
      - TRANSACTION_TYPE_IN
      - TRANSACTION_TYPE_OUT
    default: TRANSACTION_TYPE_UNSPECIFIED
  helloHelloRequest:
    type: object
    properties:
      name:
        type: string
      age:
        type: integer
        format: int64
  helloHelloResponse:
    type: object
    properties:
      greet:
        type: string
  imageCreateImageRequest:
    type: object
    properties:
      name:
        type: string
      url:
        type: string
      user_id:
        type: string
  imageCreateImageResponse:
    type: object
    properties:
      success:
        type: boolean
      message:
        type: string
  imageGetImageRequest:
    type: object
    properties:
      user_id:
        type: string
  imageImageResponse:
    type: object
    properties:
      id:
        type: string
      name:
        type: string
      url:
        type: string
      user_id:
        type: string
  imageUpdateImageRequest:
    type: object
    properties:
      name:
        type: string
      url:
        type: string
      user_id:
        type: string
  protobufAny:
    type: object
    properties:
      '@type':
        type: string
        description: |-
          A URL/resource name that uniquely identifies the type of the serialized
          protocol buffer message. This string must contain at least
          one "/" character. The last segment of the URL's path must represent
          the fully qualified name of the type (as in
          `path/google.protobuf.Duration`). The name should be in a canonical form
          (e.g., leading "." is not accepted).

          In practice, teams usually precompile into the binary all types that they
          expect it to use in the context of Any. However, for URLs which use the
          scheme `http`, `https`, or no scheme, one can optionally set up a type
          server that maps type URLs to message definitions as follows:

          * If no scheme is provided, `https` is assumed.
          * An HTTP GET on the URL must yield a [google.protobuf.Type][]
            value in binary format, or produce an error.
          * Applications are allowed to cache lookup results based on the
            URL, or have them precompiled into a binary to avoid any
            lookup. Therefore, binary compatibility needs to be preserved
            on changes to types. (Use versioned type names to manage
            breaking changes.)

          Note: this functionality is not currently available in the official
          protobuf release, and it is not used for type URLs beginning with
          type.googleapis.com.

          Schemes other than `http`, `https` (or the empty scheme) might be
          used with implementation specific semantics.
    additionalProperties: {}
    description: |-
      `Any` contains an arbitrary serialized protocol buffer message along with a
      URL that describes the type of the serialized message.

      Protobuf library provides support to pack/unpack Any values in the form
      of utility functions or additional generated methods of the Any type.

      Example 1: Pack and unpack a message in C++.

          Foo foo = ...;
          Any any;
          any.PackFrom(foo);
          ...
          if (any.UnpackTo(&foo)) {
            ...
          }

      Example 2: Pack and unpack a message in Java.

          Foo foo = ...;
          Any any = Any.pack(foo);
          ...
          if (any.is(Foo.class)) {
            foo = any.unpack(Foo.class);
          }

      Example 3: Pack and unpack a message in Python.

          foo = Foo(...)
          any = Any()
          any.Pack(foo)
          ...
          if any.Is(Foo.DESCRIPTOR):
            any.Unpack(foo)
            ...

      Example 4: Pack and unpack a message in Go

           foo := &pb.Foo{...}
           any, err := anypb.New(foo)
           if err != nil {
             ...
           }
           ...
           foo := &pb.Foo{}
           if err := any.UnmarshalTo(foo); err != nil {
             ...
           }

      The pack methods provided by protobuf library will by default use
      'type.googleapis.com/full.type.name' as the type URL and the unpack
      methods only use the fully qualified type name after the last '/'
      in the type URL, for example "foo.bar.com/x/y.z" will yield type
      name "y.z".


      JSON

      The JSON representation of an `Any` value uses the regular
      representation of the deserialized, embedded message, with an
      additional field `@type` which contains the type URL. Example:

          package google.profile;
          message Person {
            string first_name = 1;
            string last_name = 2;
          }

          {
            "@type": "type.googleapis.com/google.profile.Person",
            "firstName": <string>,
            "lastName": <string>
          }

      If the embedded message type is well-known and has a custom JSON
      representation, that representation will be embedded adding a field
      `value` which holds the custom JSON in addition to the `@type`
      field. Example (for message [google.protobuf.Duration][]):

          {
            "@type": "type.googleapis.com/google.protobuf.Duration",
            "value": "1.212s"
          }
  rpcStatus:
    type: object
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
      details:
        type: array
        items:
          type: object
          $ref: '#/definitions/protobufAny'
  typeDate:
    type: object
    properties:
      year:
        type: integer
        format: int32
        description: |-
          Year of the date. Must be from 1 to 9999, or 0 to specify a date without
          a year.
      month:
        type: integer
        format: int32
        description: |-
          Month of a year. Must be from 1 to 12, or 0 to specify a year without a
          month and day.
      day:
        type: integer
        format: int32
        description: |-
          Day of a month. Must be from 1 to 31 and valid for the year and month, or 0
          to specify a year by itself or a year and month where the day isn't
          significant.
    description: |-
      * A full date, with non-zero year, month, and day values
      * A month and day value, with a zero year, such as an anniversary
      * A year on its own, with zero month and day values
      * A year and month value, with a zero day, such as a credit card expiration
      date

      Related types are [google.type.TimeOfDay][google.type.TimeOfDay] and
      `google.protobuf.Timestamp`.
    title: |-
      Represents a whole or partial calendar date, such as a birthday. The time of
      day and time zone are either specified elsewhere or are insignificant. The
      date is relative to the Gregorian Calendar. This can represent one of the
      following:
  typeDateTime:
    type: object
    properties:
      year:
        type: integer
        format: int32
        description: |-
          Optional. Year of date. Must be from 1 to 9999, or 0 if specifying a
          datetime without a year.
      month:
        type: integer
        format: int32
        description: Required. Month of year. Must be from 1 to 12.
      day:
        type: integer
        format: int32
        description: |-
          Required. Day of month. Must be from 1 to 31 and valid for the year and
          month.
      hours:
        type: integer
        format: int32
        description: |-
          Required. Hours of day in 24 hour format. Should be from 0 to 23. An API
          may choose to allow the value "24:00:00" for scenarios like business
          closing time.
      minutes:
        type: integer
        format: int32
        description: Required. Minutes of hour of day. Must be from 0 to 59.
      seconds:
        type: integer
        format: int32
        description: |-
          Required. Seconds of minutes of the time. Must normally be from 0 to 59. An
          API may allow the value 60 if it allows leap-seconds.
      nanos:
        type: integer
        format: int32
        description: |-
          Required. Fractions of seconds in nanoseconds. Must be from 0 to
          999,999,999.
      utcOffset:
        type: string
        description: |-
          UTC offset. Must be whole seconds, between -18 hours and +18 hours.
          For example, a UTC offset of -4:00 would be represented as
          { seconds: -14400 }.
      timeZone:
        $ref: '#/definitions/typeTimeZone'
        description: Time zone.
    description: |-
      Represents civil time (or occasionally physical time).

      This type can represent a civil time in one of a few possible ways:

       * When utc_offset is set and time_zone is unset: a civil time on a calendar
         day with a particular offset from UTC.
       * When time_zone is set and utc_offset is unset: a civil time on a calendar
         day in a particular time zone.
       * When neither time_zone nor utc_offset is set: a civil time on a calendar
         day in local time.

      The date is relative to the Proleptic Gregorian Calendar.

      If year is 0, the DateTime is considered not to have a specific year. month
      and day must have valid, non-zero values.

      This type may also be used to represent a physical time if all the date and
      time fields are set and either case of the `time_offset` oneof is set.
      Consider using `Timestamp` message for physical time instead. If your use
      case also would like to store the user's timezone, that can be done in
      another field.

      This type is more flexible than some applications may want. Make sure to
      document and validate your application's limitations.
  typeTimeZone:
    type: object
    properties:
      id:
        type: string
        description: IANA Time Zone Database time zone, e.g. "America/New_York".
      version:
        type: string
        description: Optional. IANA Time Zone Database version number, e.g. "2019a".
    description: |-
      Represents a time zone from the
      [IANA Time Zone Database](https://www.iana.org/time-zones).
  userGetListUserResponse:
    type: object
    properties:
      users:
        type: array
        items:
          type: object
          $ref: '#/definitions/userUser'
  userGetUserRequest:
    type: object
    properties:
      user_id:
        type: string
  userLoginRequest:
    type: object
    properties:
      email:
        type: string
        description: Email of user to login when register before
      password:
        type: string
        description: Password of user to login when register before
    description: Description for LoginRequest
  userRegisterRequest:
    type: object
    properties:
      name:
        type: string
        description: Name of user
      email:
        type: string
        description: Email of user
      no_handphone:
        type: string
        description: No Handphone of user
      password:
        type: string
        description: Password of user
      re_password:
        type: string
        description: Enter Re-Password of user for checking password before submit
    description: Description for RegisterRequest
  userRegisterResponse:
    type: object
    properties:
      success:
        type: boolean
        example: true
        description: Return true if success
      message:
        type: string
        description: Message if success
  userUpdateUserRequest:
    type: object
    properties:
      name:
        type: string
      email:
        type: string
      password:
        type: string
      no_handphone:
        type: integer
        format: int64
      address:
        $ref: '#/definitions/protobufAny'
  userUser:
    type: object
    properties:
      id:
        type: string
      name:
        type: string
      email:
        type: string
      password:
        type: string
      no_handphone:
        type: integer
        format: int64
      address:
        $ref: '#/definitions/protobufAny'
      status:
        type: string
      role:
        type: string
      token:
        type: string
      otp:
        type: string
      created_at:
        type: string
        format: date-time
      updated_at:
        type: string
        format: date-time
      deleted_at:
        type: string
        format: date-time
      last_login_timestamp:
        type: string
        format: date-time
      birth_date:
        $ref: '#/definitions/typeDate'
  userUserResponse:
    type: object
    properties:
      id:
        type: string
        description: User id from user
      name:
        type: string
        description: User name from user
      email:
        type: string
        description: User email from user
      password:
        type: string
        description: User password from user
      status:
        type: string
        description: User status from user
      role:
        type: string
        description: User role from user
      token:
        type: string
        description: User token from user
